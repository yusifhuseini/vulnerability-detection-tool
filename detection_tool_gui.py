import tkinter as tk
from tkinter import filedialog, messagebox
import threading, asyncio 
from detection_tool import *

def run_scan():
    target = entry_target.get().strip()
    if not target:
        messagebox.showerror("Error", "Please enter a valid target.")
        return

    scan_type_selected = scan_type.get()

    if scan_type_selected == "Port Scan":
        thread = threading.Thread(target=run_port_scan, args=(target,))
    elif scan_type_selected == "Weak Password Blasting":
        protocol_selected = protocol.get()
        username = entry_username.get()
        if not username:
            messagebox.showerror("Error", "Please enter a username.")
            return
        password_file = file_path.get()
        if not password_file:
            messagebox.showerror("Error", "Please select a password file.")
            return
        thread = threading.Thread(target=run_brute_force, args=(target, protocol_selected, username, password_file))
    elif scan_type_selected == "Directory Scanning":
        wordlist = file_path.get()
        thread = threading.Thread(target=run_directory_scan, args=(target, wordlist))
    else:
        messagebox.showerror("Error", "Please select a valid scan type.")
        return

    thread.daemon = True
    thread.start()

def run_port_scan(target):
    result = port_scan(target)
    update_result_text(f"Open Ports:\n" + "\n".join(result) + "\n")

def run_brute_force(target, protocol, username, password_file):
    with open(password_file, 'r') as f:
        passwords = f.read().splitlines()
    update_result_text("")  # Clear existing text
    if protocol == "SSH":
        password = ssh_brute_force(target, username, passwords, update_result_text)
    elif protocol == "FTP":
        password = ftp_brute_force(target, username, passwords, update_result_text)
    elif protocol == "Telnet":
        password = asyncio.run(telnet_brute_force(target, username, passwords, update_result_text))
    if password:
        update_result_text(f"Password Found for {protocol}: {password}\n")
    else:
        update_result_text(f"No Password Found for {protocol}.\n")

def run_directory_scan(target, wordlist):
    result = directory_scan(target, wordlist)
    update_result_text(f"Discovered Paths: {result}\n")

def update_result_text(message):
    result_text.insert(tk.END, message + "\n")
    result_text.see(tk.END)

# Add this at the end of your GUI setup, before `app.mainloop()`
exit_message = """
Thank you for using the Vulnerability Detection Tool.
Software designed by Atsu Desmond Edem and Yusif Huseini.
"""

# GUI Setup
app = tk.Tk()
app.title("Vulnerability Detection Tool")

tk.Label(app, text="Target:").grid(row=0, column=0)
entry_target = tk.Entry(app)
entry_target.grid(row=0, column=1)

tk.Label(app, text="Scan Type:").grid(row=1, column=0)
scan_type = tk.StringVar(app)
scan_type.set("Port Scan")
tk.OptionMenu(app, scan_type, "Port Scan", "Weak Password Blasting", "Directory Scanning").grid(row=1, column=1)

tk.Label(app, text="Protocol (SSH, FTP, Telnet):").grid(row=2, column=0)
protocol = tk.StringVar(app)
protocol.set("SSH")
tk.OptionMenu(app, protocol, "SSH", "FTP", "Telnet").grid(row=2, column=1)

tk.Label(app, text="Username:").grid(row=3, column=0)
entry_username = tk.Entry(app)
entry_username.grid(row=3, column=1)

tk.Label(app, text="File Path (dictionary/wordlist):").grid(row=4, column=0)
file_path = tk.Entry(app)
file_path.grid(row=4, column=1)
tk.Button(app, text="Browse", command=lambda: file_path.insert(0, filedialog.askopenfilename())).grid(row=4, column=2)

exit_label = tk.Label(app, text=" ")
exit_label.grid(row=5, columnspan=3)

result_text = tk.Text(app, wrap='word', height=15, width=50)
result_text.grid(row=6, columnspan=3)

exit_label = tk.Label(app, text=" ")
exit_label.grid(row=7, columnspan=3)

tk.Button(app, text="Run Scan", command=run_scan).grid(row=8, columnspan=3)

exit_label = tk.Label(app, text=exit_message)
exit_label.grid(row=9, columnspan=3)

app.mainloop()
